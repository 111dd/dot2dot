{"ast":null,"code":"var _jsxFileName = \"/Users/dordavid/dot2dot/frontend/src/components/NetworkTable.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useMemo } from 'react';\nimport { Link } from 'react-router-dom';\nimport axios from 'axios';\nimport { useReactTable, getCoreRowModel, getFilteredRowModel, getSortedRowModel, flexRender } from '@tanstack/react-table';\nimport NetworkModal from './NetworkModal';\nimport './NetworkTable.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NetworkTable = () => {\n  _s();\n  const [networks, setNetworks] = useState([]);\n  const [selectedNetwork, setSelectedNetwork] = useState(null);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const fetchData = async () => {\n      setIsLoading(true);\n      try {\n        const response = await axios.get('http://127.0.0.1:5000/api/networks');\n        setNetworks(response.data);\n      } catch (err) {\n        console.error('Error fetching networks:', err);\n        setError('Failed to load data from the server.');\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchData();\n  }, []);\n  const handleDelete = async id => {\n    try {\n      await axios.delete(`http://127.0.0.1:5000/api/networks/${id}`);\n      setNetworks(prev => prev.filter(network => network.id !== id));\n      setIsModalOpen(false);\n    } catch (err) {\n      console.error('Error deleting network:', err);\n      alert('Failed to delete network.');\n    }\n  };\n  const handleUpdate = async updatedNetwork => {\n    try {\n      const response = await axios.put(`http://127.0.0.1:5000/api/networks/${updatedNetwork.id}`, updatedNetwork);\n      setNetworks(prev => prev.map(network => network.id === updatedNetwork.id ? response.data : network));\n      setIsModalOpen(false);\n    } catch (err) {\n      console.error('Error updating network:', err);\n      alert('Failed to update network.');\n    }\n  };\n  const data = useMemo(() => networks, [networks]);\n  const columns = useMemo(() => [{\n    accessorKey: 'id',\n    header: 'ID'\n  }, {\n    accessorKey: 'name',\n    header: 'Name'\n  }, {\n    accessorKey: 'description',\n    header: 'Description'\n  }, {\n    id: 'actions',\n    header: 'Actions',\n    cell: ({\n      row\n    }) => /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"table-button\",\n      onClick: () => setSelectedNetwork(row.original),\n      children: \"More\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 11\n    }, this)\n  }], []);\n  const table = useReactTable({\n    data,\n    columns,\n    getCoreRowModel: getCoreRowModel(),\n    getFilteredRowModel: getFilteredRowModel(),\n    getSortedRowModel: getSortedRowModel()\n  });\n  if (isLoading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 25\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      color: 'red'\n    },\n    children: error\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 21\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls-container\",\n      children: /*#__PURE__*/_jsxDEV(Link, {\n        to: \"/add-network\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"add-button\",\n          children: \"Add Network\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"table-container\",\n      children: /*#__PURE__*/_jsxDEV(\"table\", {\n        className: \"network-table\",\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: table.getHeaderGroups().map(headerGroup => /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: headerGroup.headers.map(header => /*#__PURE__*/_jsxDEV(\"th\", {\n              children: flexRender(header.column.columnDef.header, header.getContext())\n            }, header.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 113,\n              columnNumber: 19\n            }, this))\n          }, headerGroup.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: table.getRowModel().rows.map(row => /*#__PURE__*/_jsxDEV(\"tr\", {\n            style: {\n              backgroundColor: row.original.color || '#FFFFFF'\n            },\n            children: row.getVisibleCells().map(cell => /*#__PURE__*/_jsxDEV(\"td\", {\n              children: flexRender(cell.column.columnDef.cell, cell.getContext())\n            }, cell.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 124,\n              columnNumber: 19\n            }, this))\n          }, row.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this), isModalOpen && selectedNetwork && /*#__PURE__*/_jsxDEV(NetworkModal, {\n      network: selectedNetwork,\n      onClose: () => setIsModalOpen(false),\n      onUpdate: handleUpdate,\n      onDelete: handleDelete\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 5\n  }, this);\n};\n_s(NetworkTable, \"j9rtp7+xkyVfjZ3ILJgZEcZ2uhE=\", false, function () {\n  return [useReactTable];\n});\n_c = NetworkTable;\nexport default NetworkTable;\nvar _c;\n$RefreshReg$(_c, \"NetworkTable\");","map":{"version":3,"names":["React","useState","useEffect","useMemo","Link","axios","useReactTable","getCoreRowModel","getFilteredRowModel","getSortedRowModel","flexRender","NetworkModal","jsxDEV","_jsxDEV","NetworkTable","_s","networks","setNetworks","selectedNetwork","setSelectedNetwork","isModalOpen","setIsModalOpen","isLoading","setIsLoading","error","setError","fetchData","response","get","data","err","console","handleDelete","id","delete","prev","filter","network","alert","handleUpdate","updatedNetwork","put","map","columns","accessorKey","header","cell","row","className","onClick","original","children","fileName","_jsxFileName","lineNumber","columnNumber","table","style","color","to","getHeaderGroups","headerGroup","headers","column","columnDef","getContext","getRowModel","rows","backgroundColor","getVisibleCells","onClose","onUpdate","onDelete","_c","$RefreshReg$"],"sources":["/Users/dordavid/dot2dot/frontend/src/components/NetworkTable.js"],"sourcesContent":["import React, { useState, useEffect, useMemo } from 'react';\nimport { Link } from 'react-router-dom';\nimport axios from 'axios';\nimport {\n  useReactTable,\n  getCoreRowModel,\n  getFilteredRowModel,\n  getSortedRowModel,\n  flexRender,\n} from '@tanstack/react-table';\nimport NetworkModal from './NetworkModal';\nimport './NetworkTable.css';\n\nconst NetworkTable = () => {\n  const [networks, setNetworks] = useState([]);\n  const [selectedNetwork, setSelectedNetwork] = useState(null);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      setIsLoading(true);\n      try {\n        const response = await axios.get('http://127.0.0.1:5000/api/networks');\n        setNetworks(response.data);\n      } catch (err) {\n        console.error('Error fetching networks:', err);\n        setError('Failed to load data from the server.');\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchData();\n  }, []);\n\n  const handleDelete = async (id) => {\n    try {\n      await axios.delete(`http://127.0.0.1:5000/api/networks/${id}`);\n      setNetworks((prev) => prev.filter((network) => network.id !== id));\n      setIsModalOpen(false);\n    } catch (err) {\n      console.error('Error deleting network:', err);\n      alert('Failed to delete network.');\n    }\n  };\n\n  const handleUpdate = async (updatedNetwork) => {\n    try {\n      const response = await axios.put(\n        `http://127.0.0.1:5000/api/networks/${updatedNetwork.id}`,\n        updatedNetwork\n      );\n      setNetworks((prev) =>\n        prev.map((network) =>\n          network.id === updatedNetwork.id ? response.data : network\n        )\n      );\n      setIsModalOpen(false);\n    } catch (err) {\n      console.error('Error updating network:', err);\n      alert('Failed to update network.');\n    }\n  };\n\n  const data = useMemo(() => networks, [networks]);\n\n  const columns = useMemo(\n    () => [\n      { accessorKey: 'id', header: 'ID' },\n      { accessorKey: 'name', header: 'Name' },\n      { accessorKey: 'description', header: 'Description' },\n      {\n        id: 'actions',\n        header: 'Actions',\n        cell: ({ row }) => (\n          <button\n            className=\"table-button\"\n            onClick={() => setSelectedNetwork(row.original)}\n          >\n            More\n          </button>\n        ),\n      },\n    ],\n    []\n  );\n\n  const table = useReactTable({\n    data,\n    columns,\n    getCoreRowModel: getCoreRowModel(),\n    getFilteredRowModel: getFilteredRowModel(),\n    getSortedRowModel: getSortedRowModel(),\n  });\n\n  if (isLoading) return <div>Loading...</div>;\n  if (error) return <div style={{ color: 'red' }}>{error}</div>;\n\n  return (\n    <div>\n      <div className=\"controls-container\">\n        <Link to=\"/add-network\">\n          <button className=\"add-button\">Add Network</button>\n        </Link>\n      </div>\n      <div className=\"table-container\">\n        <table className=\"network-table\">\n          <thead>\n            {table.getHeaderGroups().map((headerGroup) => (\n              <tr key={headerGroup.id}>\n                {headerGroup.headers.map((header) => (\n                  <th key={header.id}>\n                    {flexRender(header.column.columnDef.header, header.getContext())}\n                  </th>\n                ))}\n              </tr>\n            ))}\n          </thead>\n          <tbody>\n            {table.getRowModel().rows.map((row) => (\n              <tr key={row.id} style={{ backgroundColor: row.original.color || '#FFFFFF' }}>\n                {row.getVisibleCells().map((cell) => (\n                  <td key={cell.id}>\n                    {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                  </td>\n                ))}\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n\n      {isModalOpen && selectedNetwork && (\n        <NetworkModal\n          network={selectedNetwork}\n          onClose={() => setIsModalOpen(false)}\n          onUpdate={handleUpdate}\n          onDelete={handleDelete}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default NetworkTable;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}