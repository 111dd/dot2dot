{"ast":null,"code":"var _jsxFileName = \"/Users/dordavid/dot2dot/frontend/src/components/RouterTable.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useMemo, useCallback } from 'react';\nimport axios from 'axios';\nimport { useReactTable, getCoreRowModel, getSortedRowModel, getFilteredRowModel, flexRender } from '@tanstack/react-table';\nimport RouterModal from './RouterModal';\nimport './RouterTable.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RouterTable = () => {\n  _s();\n  const [routers, setRouters] = useState([]);\n  const [networks, setNetworks] = useState([]);\n  const [globalFilter, setGlobalFilter] = useState('');\n  const [selectedRouter, setSelectedRouter] = useState(null);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const fetchData = async () => {\n      setIsLoading(true);\n      try {\n        const [routersRes, networksRes] = await Promise.all([axios.get('http://127.0.0.1:5000/api/routers'), axios.get('http://127.0.0.1:5000/api/networks')]);\n        setRouters(routersRes.data);\n        setNetworks(networksRes.data);\n      } catch (err) {\n        setError('Failed to load data from the server');\n        console.error(err);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchData();\n  }, []);\n  const getNetworkDetails = useCallback(networkId => {\n    return networks.find(network => network.id === networkId) || {};\n  }, [networks]);\n  const data = useMemo(() => {\n    return routers.map(router => {\n      const {\n        name: networkName,\n        color: networkColor\n      } = getNetworkDetails(router.network_id);\n      return {\n        ...router,\n        networkName: networkName || 'Unknown',\n        networkColor: networkColor || '#FFFFFF'\n      };\n    });\n  }, [routers, getNetworkDetails]);\n  const columns = useMemo(() => [{\n    accessorKey: 'id',\n    header: 'ID'\n  }, {\n    accessorKey: 'name',\n    header: 'Name'\n  }, {\n    accessorKey: 'ip_address',\n    header: 'IP Address'\n  }, {\n    accessorKey: 'floor',\n    header: 'Floor'\n  }, {\n    accessorKey: 'building',\n    header: 'Building'\n  }, {\n    accessorKey: 'networkName',\n    header: 'Network'\n  }, {\n    id: 'actions',\n    header: 'Actions',\n    cell: ({\n      row\n    }) => /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => handleMoreClick(row.original),\n      children: \"More\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 11\n    }, this)\n  }], []);\n  const table = useReactTable({\n    data,\n    columns,\n    getCoreRowModel: getCoreRowModel(),\n    getSortedRowModel: getSortedRowModel(),\n    getFilteredRowModel: getFilteredRowModel(),\n    state: {\n      globalFilter\n    },\n    onGlobalFilterChange: setGlobalFilter\n  });\n  const handleMoreClick = router => {\n    setSelectedRouter(router);\n    setIsModalOpen(true);\n  };\n  const handleCloseModal = () => {\n    setSelectedRouter(null);\n    setIsModalOpen(false);\n  };\n  const handleUpdateRouter = updatedRouter => {\n    setRouters(prev => prev.map(router => router.id === updatedRouter.id ? updatedRouter : router));\n    setIsModalOpen(false);\n  };\n  if (isLoading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 108,\n    columnNumber: 25\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      color: 'red'\n    },\n    children: error\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 21\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Global Search...\",\n      value: globalFilter || '',\n      onChange: e => setGlobalFilter(e.target.value),\n      className: \"global-filter\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"table-container\",\n      children: /*#__PURE__*/_jsxDEV(\"table\", {\n        className: \"router-table\",\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: table.getHeaderGroups().map(headerGroup => /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: headerGroup.headers.map(header => /*#__PURE__*/_jsxDEV(\"th\", {\n              children: [flexRender(header.column.columnDef.header, header.getContext()), header.column.getCanFilter() ? /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                value: header.column.getFilterValue() || '',\n                onChange: e => header.column.setFilterValue(e.target.value),\n                placeholder: `Filter ${header.column.columnDef.header}`\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 129,\n                columnNumber: 23\n              }, this) : null]\n            }, header.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 126,\n              columnNumber: 19\n            }, this))\n          }, headerGroup.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: table.getRowModel().rows.map(row => /*#__PURE__*/_jsxDEV(\"tr\", {\n            style: {\n              backgroundColor: row.original.networkColor\n            },\n            children: row.getVisibleCells().map(cell => /*#__PURE__*/_jsxDEV(\"td\", {\n              children: flexRender(cell.column.columnDef.cell, cell.getContext())\n            }, cell.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 145,\n              columnNumber: 19\n            }, this))\n          }, row.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this), isModalOpen && selectedRouter && /*#__PURE__*/_jsxDEV(RouterModal, {\n      router: selectedRouter,\n      onClose: handleCloseModal,\n      onUpdate: handleUpdateRouter,\n      onDelete: id => {\n        setRouters(prev => prev.filter(router => router.id !== id));\n        setIsModalOpen(false);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 112,\n    columnNumber: 5\n  }, this);\n};\n_s(RouterTable, \"xRIfe53kiDgZEWoUEgmwImtCWds=\", false, function () {\n  return [useReactTable];\n});\n_c = RouterTable;\nexport default RouterTable;\nvar _c;\n$RefreshReg$(_c, \"RouterTable\");","map":{"version":3,"names":["React","useState","useEffect","useMemo","useCallback","axios","useReactTable","getCoreRowModel","getSortedRowModel","getFilteredRowModel","flexRender","RouterModal","jsxDEV","_jsxDEV","RouterTable","_s","routers","setRouters","networks","setNetworks","globalFilter","setGlobalFilter","selectedRouter","setSelectedRouter","isModalOpen","setIsModalOpen","isLoading","setIsLoading","error","setError","fetchData","routersRes","networksRes","Promise","all","get","data","err","console","getNetworkDetails","networkId","find","network","id","map","router","name","networkName","color","networkColor","network_id","columns","accessorKey","header","cell","row","onClick","handleMoreClick","original","children","fileName","_jsxFileName","lineNumber","columnNumber","table","state","onGlobalFilterChange","handleCloseModal","handleUpdateRouter","updatedRouter","prev","style","type","placeholder","value","onChange","e","target","className","getHeaderGroups","headerGroup","headers","column","columnDef","getContext","getCanFilter","getFilterValue","setFilterValue","getRowModel","rows","backgroundColor","getVisibleCells","onClose","onUpdate","onDelete","filter","_c","$RefreshReg$"],"sources":["/Users/dordavid/dot2dot/frontend/src/components/RouterTable.js"],"sourcesContent":["import React, { useState, useEffect, useMemo, useCallback } from 'react';\nimport axios from 'axios';\nimport {\n  useReactTable,\n  getCoreRowModel,\n  getSortedRowModel,\n  getFilteredRowModel,\n  flexRender,\n} from '@tanstack/react-table';\nimport RouterModal from './RouterModal';\nimport './RouterTable.css';\n\nconst RouterTable = () => {\n  const [routers, setRouters] = useState([]);\n  const [networks, setNetworks] = useState([]);\n  const [globalFilter, setGlobalFilter] = useState('');\n  const [selectedRouter, setSelectedRouter] = useState(null);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      setIsLoading(true);\n      try {\n        const [routersRes, networksRes] = await Promise.all([\n          axios.get('http://127.0.0.1:5000/api/routers'),\n          axios.get('http://127.0.0.1:5000/api/networks'),\n        ]);\n        setRouters(routersRes.data);\n        setNetworks(networksRes.data);\n      } catch (err) {\n        setError('Failed to load data from the server');\n        console.error(err);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchData();\n  }, []);\n\n  const getNetworkDetails = useCallback(\n    (networkId) => {\n      return networks.find((network) => network.id === networkId) || {};\n    },\n    [networks]\n  );\n\n  const data = useMemo(() => {\n    return routers.map((router) => {\n      const { name: networkName, color: networkColor } = getNetworkDetails(router.network_id);\n      return {\n        ...router,\n        networkName: networkName || 'Unknown',\n        networkColor: networkColor || '#FFFFFF',\n      };\n    });\n  }, [routers, getNetworkDetails]);\n\n  const columns = useMemo(\n    () => [\n      { accessorKey: 'id', header: 'ID' },\n      { accessorKey: 'name', header: 'Name' },\n      { accessorKey: 'ip_address', header: 'IP Address' },\n      { accessorKey: 'floor', header: 'Floor' },\n      { accessorKey: 'building', header: 'Building' },\n      { accessorKey: 'networkName', header: 'Network' },\n      {\n        id: 'actions',\n        header: 'Actions',\n        cell: ({ row }) => (\n          <button onClick={() => handleMoreClick(row.original)}>More</button>\n        ),\n      },\n    ],\n    []\n  );\n\n  const table = useReactTable({\n    data,\n    columns,\n    getCoreRowModel: getCoreRowModel(),\n    getSortedRowModel: getSortedRowModel(),\n    getFilteredRowModel: getFilteredRowModel(),\n    state: {\n      globalFilter,\n    },\n    onGlobalFilterChange: setGlobalFilter,\n  });\n\n  const handleMoreClick = (router) => {\n    setSelectedRouter(router);\n    setIsModalOpen(true);\n  };\n\n  const handleCloseModal = () => {\n    setSelectedRouter(null);\n    setIsModalOpen(false);\n  };\n\n  const handleUpdateRouter = (updatedRouter) => {\n    setRouters((prev) =>\n      prev.map((router) => (router.id === updatedRouter.id ? updatedRouter : router))\n    );\n    setIsModalOpen(false);\n  };\n\n  if (isLoading) return <div>Loading...</div>;\n  if (error) return <div style={{ color: 'red' }}>{error}</div>;\n\n  return (\n    <div>\n      <input\n        type=\"text\"\n        placeholder=\"Global Search...\"\n        value={globalFilter || ''}\n        onChange={(e) => setGlobalFilter(e.target.value)}\n        className=\"global-filter\"\n      />\n      <div className=\"table-container\">\n        <table className=\"router-table\">\n          <thead>\n            {table.getHeaderGroups().map((headerGroup) => (\n              <tr key={headerGroup.id}>\n                {headerGroup.headers.map((header) => (\n                  <th key={header.id}>\n                    {flexRender(header.column.columnDef.header, header.getContext())}\n                    {header.column.getCanFilter() ? (\n                      <input\n                        type=\"text\"\n                        value={header.column.getFilterValue() || ''}\n                        onChange={(e) => header.column.setFilterValue(e.target.value)}\n                        placeholder={`Filter ${header.column.columnDef.header}`}\n                      />\n                    ) : null}\n                  </th>\n                ))}\n              </tr>\n            ))}\n          </thead>\n          <tbody>\n            {table.getRowModel().rows.map((row) => (\n              <tr key={row.id} style={{ backgroundColor: row.original.networkColor }}>\n                {row.getVisibleCells().map((cell) => (\n                  <td key={cell.id}>\n                    {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                  </td>\n                ))}\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n\n      {isModalOpen && selectedRouter && (\n        <RouterModal\n          router={selectedRouter}\n          onClose={handleCloseModal}\n          onUpdate={handleUpdateRouter}\n          onDelete={(id) => {\n            setRouters((prev) => prev.filter((router) => router.id !== id));\n            setIsModalOpen(false);\n          }}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default RouterTable;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}